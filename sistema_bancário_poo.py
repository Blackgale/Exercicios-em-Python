# -*- coding: utf-8 -*-
"""Sistema Bancário POO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q5msKxlK2Sk8F_p8F3gve0thn-GCbt65
"""

from typing import List, Dict, Optional
import textwrap


class Usuario:
    def __init__(self, nome: str, data_nascimento: str, cpf: str, endereco: str):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco


class Conta:
    LIMITE_SAQUES = 3

    def __init__(self, agencia: str, numero: int, usuario: Usuario):
        self.agencia = agencia
        self.numero = numero
        self.usuario = usuario
        self.saldo = 0
        self.extrato = ""
        self.limite = 500
        self.numero_saques = 0

    def depositar(self, valor: float) -> None:
        if valor > 0:
            self.saldo += valor
            self.extrato += f"Depósito:\tR$ {valor:.2f}\n"
            print("\n=== Depósito realizado com sucesso! ===")
        else:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")

    def sacar(self, valor: float) -> None:
        if valor <= 0:
            print("\n@@@ Operação falhou! O valor informado é inválido. @@@")
            return

        if valor > self.saldo:
            print("\n@@@ Operação falhou! Você não tem saldo suficiente. @@@")
        elif valor > self.limite:
            print("\n@@@ Operação falhou! O valor do saque excede o limite. @@@")
        elif self.numero_saques >= Conta.LIMITE_SAQUES:
            print("\n@@@ Operação falhou! Número máximo de saques excedido. @@@")
        else:
            self.saldo -= valor
            self.extrato += f"Saque:\t\tR$ {valor:.2f}\n"
            self.numero_saques += 1
            print("\n=== Saque realizado com sucesso! ===")

    def exibir_extrato(self) -> None:
        print("\n================ EXTRATO ================")
        print("Não foram realizadas movimentações." if not self.extrato else self.extrato)
        print(f"\nSaldo:\t\tR$ {self.saldo:.2f}")
        print("==========================================")


class Banco:
    def __init__(self):
        self.usuarios: List[Usuario] = []
        self.contas: List[Conta] = []

    def criar_usuario(self) -> None:
        cpf = input("Informe o CPF (somente número): ")
        if self.filtrar_usuario(cpf):
            print("\n@@@ Já existe usuário com esse CPF! @@@")
            return

        nome = input("Informe o nome completo: ")
        data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
        endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

        usuario = Usuario(nome, data_nascimento, cpf, endereco)
        self.usuarios.append(usuario)
        print("=== Usuário criado com sucesso! ===")

    def filtrar_usuario(self, cpf: str) -> Optional[Usuario]:
        return next((usuario for usuario in self.usuarios if usuario.cpf == cpf), None)

    def criar_conta(self, agencia: str) -> None:
        cpf = input("Informe o CPF do usuário: ")
        usuario = self.filtrar_usuario(cpf)

        if usuario:
            numero_conta = len(self.contas) + 1
            conta = Conta(agencia, numero_conta, usuario)
            self.contas.append(conta)
            print("\n=== Conta criada com sucesso! ===")
        else:
            print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")

    def listar_contas(self) -> None:
        for conta in self.contas:
            linha = f"""\nAgência:\t{conta.agencia}
C/C:\t\t{conta.numero}
Titular:\t{conta.usuario.nome}"""
            print("=" * 100)
            print(textwrap.dedent(linha))


def menu() -> str:
    menu_text = """\n
    ================ MENU ================
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    => """
    return input(textwrap.dedent(menu_text))


def main():
    AGENCIA = "0001"
    banco = Banco()

    while True:
        opcao = menu()

        if opcao == "d":
            numero = int(input("Informe o número da conta: "))
            conta = banco.contas[numero - 1]
            valor = float(input("Informe o valor do depósito: "))
            conta.depositar(valor)

        elif opcao == "s":
            numero = int(input("Informe o número da conta: "))
            conta = banco.contas[numero - 1]
            valor = float(input("Informe o valor do saque: "))
            conta.sacar(valor)

        elif opcao == "e":
            numero = int(input("Informe o número da conta: "))
            conta = banco.contas[numero - 1]
            conta.exibir_extrato()

        elif opcao == "nu":
            banco.criar_usuario()

        elif opcao == "nc":
            banco.criar_conta(AGENCIA)

        elif opcao == "lc":
            banco.listar_contas()

        elif opcao == "q":
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")


if __name__ == "__main__":
    main()